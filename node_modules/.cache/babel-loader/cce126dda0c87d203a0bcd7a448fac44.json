{"ast":null,"code":"var _jsxFileName = \"/Users/sadministrator/Desktop/react/food-order-app/src/store/cartProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport CartContext from './cart-context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingItem = state.items[existingItemIndex];\n    let updatedItems;\n\n    if (existingItem) {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } else if (action.type === 'REMOVE') {\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return defaultState;\n  }\n\n  return defaultState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatch] = useReducer(cartReducer, defaultState);\n\n  const addItemToCart = item => {\n    dispatch({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCart = id => {\n    dispatch({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const clearCart = () => {\n    dispatch({\n      type: \"CLEAR\"\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCart,\n    removeItem: removeItemFromCart,\n    clearCart: clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"3eJgXLlutaxc4vzcxNOqrnHlulQ=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/sadministrator/Desktop/react/food-order-app/src/store/cartProvider.jsx"],"names":["CartContext","useReducer","defaultState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingItemIndex","findIndex","id","existingItem","updatedItems","updatedItem","concat","filter","CartProvider","props","cartState","dispatch","addItemToCart","removeItemFromCart","clearCart","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import CartContext from './cart-context';\nimport { useReducer } from 'react';\n\nconst defaultState = {\n    items: [],\n    totalAmount : 0,\n\n}\nconst cartReducer = (state, action)=> {\n    if(action.type===\"ADD\"){\n         const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n         const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\n         const existingItem = state.items[existingItemIndex]\n         let updatedItems\n         if(existingItem){\n            const updatedItem = {\n                ...existingItem,\n                amount : existingItem.amount + action.item.amount\n            }\n            updatedItems = [...state.items ];\n            updatedItems[existingItemIndex] = updatedItem\n         }else {\n            updatedItems = state.items.concat(action.item)\n\n         }\n         return {\n              items: updatedItems,\n              totalAmount : updatedTotalAmount\n         }\n    }else if(action.type==='REMOVE'){\n        const existingItemIndex = state.items.findIndex(item => item.id === action.id)\n        const existingItem = state.items[existingItemIndex];\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\n        let updatedItems;\n\n        if(existingItem.amount === 1){\n           updatedItems = state.items.filter(item => item.id !== action.id)\n        }else {\n            const updatedItem = {...existingItem, \n                amount: existingItem.amount -1  }\n                updatedItems = [...state.items]\n                updatedItems[existingItemIndex] = updatedItem\n        }\n        return {\n            items: updatedItems, \n            totalAmount: updatedTotalAmount\n        }\n    }\n    if(action.type ===\"CLEAR\"){\n        return defaultState\n        \n        \n    }\n    return defaultState;\n\n}\n\nconst CartProvider = props => {\n    const [cartState, dispatch] = useReducer(cartReducer, defaultState)\n    \n    const addItemToCart = (item)=> {\n        dispatch({type:'ADD', item: item})\n    }\n\n    const removeItemFromCart = (id)=> {\n        dispatch({type:'REMOVE', id:id})\n    }\n    const clearCart = ()=> {\n        dispatch({type: \"CLEAR\"})\n    }\n\n    const cartContext = {\n        items : cartState.items,\n        totalAmount : cartState.totalAmount,\n        addItem: addItemToCart,\n        removeItem: removeItemFromCart,\n        clearCart: clearCart\n    }\n\n    return <CartContext.Provider value={cartContext}>\n            {props.children}\n        </CartContext.Provider>\n}\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}