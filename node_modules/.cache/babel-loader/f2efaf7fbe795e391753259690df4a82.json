{"ast":null,"code":"var _jsxFileName = \"/Users/sadministrator/Desktop/react/food-order-app/src/store/cartProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport CartContext from './cart-context';\nimport { useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type = \"ADD\") {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } else if (action.type = 'REMOVE') {}\n\n  return defaultState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatch] = useReducer(cartReducer, defaultState);\n\n  const addItemToCart = item => {\n    dispatch({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCart = id => {\n    dispatch({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCart,\n    removeItem: removeItemFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"3eJgXLlutaxc4vzcxNOqrnHlulQ=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/sadministrator/Desktop/react/food-order-app/src/store/cartProvider.jsx"],"names":["CartContext","useContext","useReducer","defaultState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatch","addItemToCart","removeItemFromCart","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,WAAW,EAAG;AAFG,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAClC,MAAGA,MAAM,CAACC,IAAP,GAAY,KAAf,EAAqB;AAChB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,WAAO;AACFX,MAAAA,KAAK,EAAEM,YADL;AAEFL,MAAAA,WAAW,EAAGQ;AAFZ,KAAP;AAIJ,GAPD,MAOM,IAAGL,MAAM,CAACC,IAAP,GAAY,QAAf,EAAwB,CAE7B;;AACD,SAAON,YAAP;AAGH,CAdD;;AAgBA,MAAMa,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBjB,UAAU,CAACI,WAAD,EAAcH,YAAd,CAAxC;;AAEA,QAAMiB,aAAa,GAAIR,IAAD,IAAS;AAC3BO,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAC,KAAN;AAAaG,MAAAA,IAAI,EAAEA;AAAnB,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMS,kBAAkB,GAAIC,EAAD,IAAO;AAC9BH,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAC,QAAN;AAAgBa,MAAAA,EAAE,EAACA;AAAnB,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAChBnB,IAAAA,KAAK,EAAGc,SAAS,CAACd,KADF;AAEhBC,IAAAA,WAAW,EAAGa,SAAS,CAACb,WAFR;AAGhBmB,IAAAA,OAAO,EAAEJ,aAHO;AAIhBK,IAAAA,UAAU,EAAEJ;AAJI,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACEN,KAAK,CAACS;AADR;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CArBD;;GAAMV,Y;;KAAAA,Y;AAuBN,eAAeA,YAAf","sourcesContent":["import CartContext from './cart-context';\nimport { useContext, useReducer } from 'react';\n\nconst defaultState = {\n    items: [],\n    totalAmount : 0,\n\n}\nconst cartReducer = (state, action)=> {\n    if(action.type=\"ADD\"){\n         const updatedItems = state.items.concat(action.item)\n         const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n         return {\n              items: updatedItems,\n              totalAmount : updatedTotalAmount\n         }\n    }else if(action.type='REMOVE'){\n        \n    }\n    return defaultState;\n\n\n}\n\nconst CartProvider = props => {\n    const [cartState, dispatch] = useReducer(cartReducer, defaultState)\n    \n    const addItemToCart = (item)=> {\n        dispatch({type:'ADD', item: item})\n    }\n\n    const removeItemFromCart = (id)=> {\n        dispatch({type:'REMOVE', id:id})\n    }\n\n    const cartContext = {\n        items : cartState.items,\n        totalAmount : cartState.totalAmount,\n        addItem: addItemToCart,\n        removeItem: removeItemFromCart\n    }\n\n    return <CartContext.Provider value={cartContext}>\n            {props.children}\n        </CartContext.Provider>\n}\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}